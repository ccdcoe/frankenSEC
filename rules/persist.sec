type=Single
ptype=SubStr
pattern=SEC_STARTUP
context=SEC_INTERNAL_EVENT
continue=TakeNext
desc=Load the Storable module and terminate if it is not found
action=eval %ret (require Storable); \
       if %ret ( logonly Storable loaded ) else ( eval %o exit(1) )


type=Single
ptype=SubStr
pattern=SEC_STARTUP
context=SEC_INTERNAL_EVENT
desc=Restore all SEC contexts from /opt/sec/var/SEC_CONTEXTS on startup
action=lcall %ret -> ( sub { %main::context_list = \
       %{Storable::retrieve("/opt/sec/var/SEC_CONTEXTS")}; } )

type=Single
ptype=SubStr
pattern=SEC_SHUTDOWN
context=SEC_INTERNAL_EVENT
desc=Save all SEC contexts into /opt/sec/var/SEC_CONTEXTS on shutdown
action=lcall %ret -> ( sub { \
       Storable::store(\%main::context_list, "/opt/sec/var/SEC_CONTEXTS"); } )


# Assign input and output named pipe paths to variables
type=Single
ptype=SubStr
pattern=SEC_STARTUP
context=SEC_INTERNAL_EVENT
continue=TakeNext
desc=generic
action=assign %genericpipe /opt/sec/inputs/%s

type=Single
ptype=SubStr
pattern=SEC_STARTUP
context=SEC_INTERNAL_EVENT
continue=TakeNext
desc=outputpipe
action=assign %outputpipe /opt/sec/%s
